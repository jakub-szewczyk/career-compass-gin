// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
WITH new_user AS (
  INSERT INTO users (first_name, last_name, email, password)
  VALUES (
    UPPER(LEFT($1::text, 1)) || LOWER(SUBSTRING($1::text FROM 2)),
    UPPER(LEFT($2::text, 1)) || LOWER(SUBSTRING($2::text FROM 2)),
    $3::text,
    $4::text
  )
  RETURNING id, first_name, last_name, email, is_email_verified
),
new_token AS (
  INSERT INTO verification_tokens (user_id) SELECT id FROM new_user RETURNING token
)
SELECT 
  new_user.id,
  new_user.first_name,
  new_user.last_name,
  new_user.email,
  new_user.is_email_verified,
  new_token.token as verification_token
FROM new_user, new_token
`

type CreateUserParams struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type CreateUserRow struct {
	ID                pgtype.UUID `json:"id"`
	FirstName         string      `json:"firstName"`
	LastName          string      `json:"lastName"`
	Email             string      `json:"email"`
	IsEmailVerified   pgtype.Bool `json:"isEmailVerified"`
	VerificationToken string      `json:"verificationToken"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.VerificationToken,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT u.id, u.first_name, u.last_name, u.email, u.is_email_verified, v.token AS verification_token
FROM users AS u
JOIN verification_tokens AS v ON u.id = v.user_id
WHERE u.id = $1
`

type GetUserByIdRow struct {
	ID                pgtype.UUID `json:"id"`
	FirstName         string      `json:"firstName"`
	LastName          string      `json:"lastName"`
	Email             string      `json:"email"`
	IsEmailVerified   pgtype.Bool `json:"isEmailVerified"`
	VerificationToken string      `json:"verificationToken"`
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.VerificationToken,
	)
	return i, err
}

const getUserOnSignIn = `-- name: GetUserOnSignIn :one
SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.is_email_verified, v.token AS verification_token
FROM users AS u
JOIN verification_tokens AS v ON u.id = v.user_id
WHERE email = $1
`

type GetUserOnSignInRow struct {
	ID                pgtype.UUID `json:"id"`
	FirstName         string      `json:"firstName"`
	LastName          string      `json:"lastName"`
	Email             string      `json:"email"`
	Password          string      `json:"password"`
	IsEmailVerified   pgtype.Bool `json:"isEmailVerified"`
	VerificationToken string      `json:"verificationToken"`
}

func (q *Queries) GetUserOnSignIn(ctx context.Context, email string) (GetUserOnSignInRow, error) {
	row := q.db.QueryRow(ctx, getUserOnSignIn, email)
	var i GetUserOnSignInRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.VerificationToken,
	)
	return i, err
}

const purge = `-- name: Purge :exec
TRUNCATE TABLE users, verification_tokens
`

func (q *Queries) Purge(ctx context.Context) error {
	_, err := q.db.Exec(ctx, purge)
	return err
}
