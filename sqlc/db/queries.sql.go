// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobApplication = `-- name: CreateJobApplication :one
INSERT INTO job_applications (user_id, company_name, job_title, date_applied, status, min_salary, max_salary, job_posting_url, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, company_name, job_title, date_applied, status, min_salary, max_salary, job_posting_url, notes
`

type CreateJobApplicationParams struct {
	UserID        pgtype.UUID        `json:"userId"`
	CompanyName   string             `json:"companyName"`
	JobTitle      string             `json:"jobTitle"`
	DateApplied   pgtype.Timestamptz `json:"dateApplied"`
	Status        Status             `json:"status"`
	MinSalary     pgtype.Float8      `json:"minSalary"`
	MaxSalary     pgtype.Float8      `json:"maxSalary"`
	JobPostingUrl pgtype.Text        `json:"jobPostingUrl"`
	Notes         pgtype.Text        `json:"notes"`
}

type CreateJobApplicationRow struct {
	ID            pgtype.UUID        `json:"id"`
	CompanyName   string             `json:"companyName"`
	JobTitle      string             `json:"jobTitle"`
	DateApplied   pgtype.Timestamptz `json:"dateApplied"`
	Status        Status             `json:"status"`
	MinSalary     pgtype.Float8      `json:"minSalary"`
	MaxSalary     pgtype.Float8      `json:"maxSalary"`
	JobPostingUrl pgtype.Text        `json:"jobPostingUrl"`
	Notes         pgtype.Text        `json:"notes"`
}

func (q *Queries) CreateJobApplication(ctx context.Context, arg CreateJobApplicationParams) (CreateJobApplicationRow, error) {
	row := q.db.QueryRow(ctx, createJobApplication,
		arg.UserID,
		arg.CompanyName,
		arg.JobTitle,
		arg.DateApplied,
		arg.Status,
		arg.MinSalary,
		arg.MaxSalary,
		arg.JobPostingUrl,
		arg.Notes,
	)
	var i CreateJobApplicationRow
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.JobTitle,
		&i.DateApplied,
		&i.Status,
		&i.MinSalary,
		&i.MaxSalary,
		&i.JobPostingUrl,
		&i.Notes,
	)
	return i, err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_reset_tokens (user_id)
VALUES ($1)
ON CONFLICT (user_id)
DO UPDATE SET token = encode(gen_random_bytes(32), 'hex'), expires_at = NOW() + INTERVAL '15 minutes'
RETURNING token
`

func (q *Queries) CreatePasswordResetToken(ctx context.Context, userID pgtype.UUID) (string, error) {
	row := q.db.QueryRow(ctx, createPasswordResetToken, userID)
	var token string
	err := row.Scan(&token)
	return token, err
}

const createUser = `-- name: CreateUser :one
WITH new_user AS (
  INSERT INTO users (first_name, last_name, email, password)
  VALUES (
    UPPER(LEFT($1::text, 1)) || LOWER(SUBSTRING($1::text FROM 2)),
    UPPER(LEFT($2::text, 1)) || LOWER(SUBSTRING($2::text FROM 2)),
    $3::text,
    $4::text
  )
  RETURNING id, first_name, last_name, email, is_email_verified
),
new_token AS (
  INSERT INTO verification_tokens (user_id) SELECT id FROM new_user RETURNING token
)
SELECT 
  new_user.id,
  new_user.first_name,
  new_user.last_name,
  new_user.email,
  new_user.is_email_verified,
  new_token.token as verification_token
FROM new_user, new_token
`

type CreateUserParams struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type CreateUserRow struct {
	ID                pgtype.UUID `json:"id"`
	FirstName         string      `json:"firstName"`
	LastName          string      `json:"lastName"`
	Email             string      `json:"email"`
	IsEmailVerified   pgtype.Bool `json:"isEmailVerified"`
	VerificationToken string      `json:"verificationToken"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.VerificationToken,
	)
	return i, err
}

const deletePasswordResetToken = `-- name: DeletePasswordResetToken :exec
DELETE FROM password_reset_tokens WHERE token = $1
`

func (q *Queries) DeletePasswordResetToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deletePasswordResetToken, token)
	return err
}

const expireVerificationToken = `-- name: ExpireVerificationToken :exec
UPDATE verification_tokens SET expires_at = NOW() - INTERVAL '1 day' WHERE user_id = $1
`

func (q *Queries) ExpireVerificationToken(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, expireVerificationToken, userID)
	return err
}

const getJobApplication = `-- name: GetJobApplication :one
SELECT id, company_name, job_title, date_applied, status, is_replied, min_salary, max_salary, job_posting_url, notes FROM job_applications WHERE id = $1 AND user_id = $2
`

type GetJobApplicationParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"userId"`
}

type GetJobApplicationRow struct {
	ID            pgtype.UUID        `json:"id"`
	CompanyName   string             `json:"companyName"`
	JobTitle      string             `json:"jobTitle"`
	DateApplied   pgtype.Timestamptz `json:"dateApplied"`
	Status        Status             `json:"status"`
	IsReplied     bool               `json:"isReplied"`
	MinSalary     pgtype.Float8      `json:"minSalary"`
	MaxSalary     pgtype.Float8      `json:"maxSalary"`
	JobPostingUrl pgtype.Text        `json:"jobPostingUrl"`
	Notes         pgtype.Text        `json:"notes"`
}

func (q *Queries) GetJobApplication(ctx context.Context, arg GetJobApplicationParams) (GetJobApplicationRow, error) {
	row := q.db.QueryRow(ctx, getJobApplication, arg.ID, arg.UserID)
	var i GetJobApplicationRow
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.JobTitle,
		&i.DateApplied,
		&i.Status,
		&i.IsReplied,
		&i.MinSalary,
		&i.MaxSalary,
		&i.JobPostingUrl,
		&i.Notes,
	)
	return i, err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT token, expires_at, user_id FROM password_reset_tokens WHERE token = $1
`

type GetPasswordResetTokenRow struct {
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expiresAt"`
	UserID    pgtype.UUID        `json:"userId"`
}

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (GetPasswordResetTokenRow, error) {
	row := q.db.QueryRow(ctx, getPasswordResetToken, token)
	var i GetPasswordResetTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt, &i.UserID)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id, u.first_name, u.last_name, u.email, u.is_email_verified, v.token as verification_token
FROM users AS u
JOIN verification_tokens as v ON u.id = v.user_id
WHERE u.email = $1
`

type GetUserByEmailRow struct {
	ID                pgtype.UUID `json:"id"`
	FirstName         string      `json:"firstName"`
	LastName          string      `json:"lastName"`
	Email             string      `json:"email"`
	IsEmailVerified   pgtype.Bool `json:"isEmailVerified"`
	VerificationToken string      `json:"verificationToken"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.VerificationToken,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, email, is_email_verified FROM users WHERE id = $1
`

type GetUserByIdRow struct {
	ID              pgtype.UUID `json:"id"`
	FirstName       string      `json:"firstName"`
	LastName        string      `json:"lastName"`
	Email           string      `json:"email"`
	IsEmailVerified pgtype.Bool `json:"isEmailVerified"`
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUserOnSignIn = `-- name: GetUserOnSignIn :one
SELECT id, first_name, last_name, email, password, is_email_verified FROM users WHERE email = $1
`

type GetUserOnSignInRow struct {
	ID              pgtype.UUID `json:"id"`
	FirstName       string      `json:"firstName"`
	LastName        string      `json:"lastName"`
	Email           string      `json:"email"`
	Password        string      `json:"password"`
	IsEmailVerified pgtype.Bool `json:"isEmailVerified"`
}

func (q *Queries) GetUserOnSignIn(ctx context.Context, email string) (GetUserOnSignInRow, error) {
	row := q.db.QueryRow(ctx, getUserOnSignIn, email)
	var i GetUserOnSignInRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
	)
	return i, err
}

const getVerificationToken = `-- name: GetVerificationToken :one
SELECT token, expires_at FROM verification_tokens WHERE user_id = $1
`

type GetVerificationTokenRow struct {
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expiresAt"`
}

func (q *Queries) GetVerificationToken(ctx context.Context, userID pgtype.UUID) (GetVerificationTokenRow, error) {
	row := q.db.QueryRow(ctx, getVerificationToken, userID)
	var i GetVerificationTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt)
	return i, err
}

const purge = `-- name: Purge :exec
TRUNCATE TABLE users, verification_tokens, password_reset_tokens
`

func (q *Queries) Purge(ctx context.Context) error {
	_, err := q.db.Exec(ctx, purge)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET password = $2 WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       pgtype.UUID `json:"id"`
	Password string      `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password)
	return err
}

const updateVerificationToken = `-- name: UpdateVerificationToken :one
UPDATE verification_tokens SET
  token = encode(gen_random_bytes(32), 'hex'),
  expires_at = NOW() + INTERVAL '1 day'
WHERE user_id = $1
RETURNING token, expires_at
`

type UpdateVerificationTokenRow struct {
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expiresAt"`
}

func (q *Queries) UpdateVerificationToken(ctx context.Context, userID pgtype.UUID) (UpdateVerificationTokenRow, error) {
	row := q.db.QueryRow(ctx, updateVerificationToken, userID)
	var i UpdateVerificationTokenRow
	err := row.Scan(&i.Token, &i.ExpiresAt)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :one
UPDATE users SET is_email_verified = true WHERE id = $1 RETURNING id, first_name, last_name, email, is_email_verified
`

type VerifyEmailRow struct {
	ID              pgtype.UUID `json:"id"`
	FirstName       string      `json:"firstName"`
	LastName        string      `json:"lastName"`
	Email           string      `json:"email"`
	IsEmailVerified pgtype.Bool `json:"isEmailVerified"`
}

func (q *Queries) VerifyEmail(ctx context.Context, id pgtype.UUID) (VerifyEmailRow, error) {
	row := q.db.QueryRow(ctx, verifyEmail, id)
	var i VerifyEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
	)
	return i, err
}
