basePath: /api
definitions:
  db.Status:
    enum:
    - IN_PROGRESS
    - REJECTED
    - ACCEPTED
    type: string
    x-enum-varnames:
    - StatusINPROGRESS
    - StatusREJECTED
    - StatusACCEPTED
  models.CreateJobApplicationReqBody:
    properties:
      companyName:
        example: Evil Corp Inc.
        type: string
      dateApplied:
        example: "2025-03-14T12:34:56Z"
        type: string
      jobPostingURL:
        example: https://glassbore.com/jobs/swe420692137
        type: string
      jobTitle:
        example: Software Engineer
        type: string
      maxSalary:
        example: 70000
        type: number
      minSalary:
        example: 50000
        type: number
      notes:
        example: Follow up in two weeks
        type: string
      status:
        allOf:
        - $ref: '#/definitions/db.Status'
        example: IN_PROGRESS
    required:
    - companyName
    - dateApplied
    - jobTitle
    - status
    type: object
  models.CreateJobApplicationResBody:
    properties:
      companyName:
        example: Evil Corp Inc.
        type: string
      dateApplied:
        example: "2025-03-14T12:34:56Z"
        type: string
      id:
        example: f4d15edc-e780-42b5-957d-c4352401d9ca
        type: string
      jobPostingURL:
        example: https://glassbore.com/jobs/swe420692137
        type: string
      jobTitle:
        example: Software Engineer
        type: string
      maxSalary:
        example: 70000
        type: number
      minSalary:
        example: 50000
        type: number
      notes:
        example: Follow up in two weeks
        type: string
      status:
        allOf:
        - $ref: '#/definitions/db.Status'
        example: IN_PROGRESS
    type: object
  models.Error:
    properties:
      error:
        type: string
    type: object
  models.HealthCheckResBody:
    properties:
      status:
        example: healthy
        type: string
    type: object
  models.InitPasswordResetReqBody:
    properties:
      email:
        example: john.doe@example.com
        type: string
    required:
    - email
    type: object
  models.JobApplicationResBody:
    properties:
      companyName:
        example: Evil Corp Inc.
        type: string
      dateApplied:
        example: "2025-03-14T12:34:56Z"
        type: string
      id:
        example: f4d15edc-e780-42b5-957d-c4352401d9ca
        type: string
      jobPostingURL:
        example: https://glassbore.com/jobs/swe420692137
        type: string
      jobTitle:
        example: Software Engineer
        type: string
      maxSalary:
        example: 70000
        type: number
      minSalary:
        example: 50000
        type: number
      notes:
        example: Follow up in two weeks
        type: string
      status:
        allOf:
        - $ref: '#/definitions/db.Status'
        example: IN_PROGRESS
    required:
    - companyName
    - dateApplied
    - jobTitle
    - status
    type: object
  models.ProfileResBody:
    properties:
      email:
        example: john.doe@example.com
        type: string
      firstName:
        example: John
        type: string
      id:
        example: f4d15edc-e780-42b5-957d-c4352401d9ca
        type: string
      isEmailVerified:
        example: true
        type: boolean
      lastName:
        example: Doe
        type: string
    type: object
  models.ResetPasswordReqBody:
    properties:
      confirmPassword:
        example: qwerty!123456789
        type: string
      password:
        description: 'TODO: Improve password strength'
        example: qwerty!123456789
        minLength: 16
        type: string
      passwordResetToken:
        example: ec6c66fbd3d92b1ad44f21613c5ee2e82c3dd65e8c918945308087ce77b5fe47
        type: string
    required:
    - confirmPassword
    - password
    - passwordResetToken
    type: object
  models.SignInReqBody:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        description: 'TODO: Improve password strength'
        example: qwerty!123456789
        minLength: 16
        type: string
    required:
    - email
    - password
    type: object
  models.SignInResBody:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.ProfileResBody'
    type: object
  models.SignUpReqBody:
    properties:
      confirmPassword:
        example: qwerty!123456789
        type: string
      email:
        example: john.doe@example.com
        type: string
      firstName:
        example: John
        type: string
      lastName:
        example: Doe
        type: string
      password:
        description: 'TODO: Improve password strength'
        example: qwerty!123456789
        minLength: 16
        type: string
    required:
    - confirmPassword
    - email
    - firstName
    - lastName
    - password
    type: object
  models.SignUpResBody:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzk4MDQ1NTEsInN1YiI6ImpvaG4uZG9lQGdtYWlsLmNvbSIsInVpZCI6IjZiZTA1YTcyLTc5OGQtNGI3Ny1iOGQzLTc3MjNhN2JmM2FkYSJ9.5sj2fHB3pky3N6-mDgaPQCQA0gkEz4oQsdtVEC9BLqE
        type: string
      user:
        $ref: '#/definitions/models.ProfileResBody'
    type: object
  models.VerifyEmailReqBody:
    properties:
      verificationToken:
        example: 2cc313c8b72f8e5b725e07130d0b851811f2e60c8b19f085b3aa58d1516ef767
        type: string
    required:
    - verificationToken
    type: object
info:
  contact: {}
  title: Career Compass REST API
paths:
  /health-check:
    get:
      description: Returns the health status of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthCheckResBody'
      summary: Health check
      tags:
      - Health check
  /job-applications:
    post:
      consumes:
      - application/json
      description: Processes and creates a new job application with the provided data
      parameters:
      - description: Job application details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateJobApplicationReqBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateJobApplicationResBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Submit a new job application
      tags:
      - Job application
  /job-applications/{jobApplicationId}:
    get:
      consumes:
      - application/json
      description: Fetches the details of a specific job application by its id
      parameters:
      - description: Job application uuid
        in: path
        name: jobApplicationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.JobApplicationResBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Retrieve job application details
      tags:
      - Job application
  /password/reset:
    post:
      consumes:
      - application/json
      description: Generates and sends a password reset token to the user's email
        address
      parameters:
      - description: User's email address
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.InitPasswordResetReqBody'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Initiate password reset
      tags:
      - Password
    put:
      consumes:
      - application/json
      description: Allows a user to set a new password using a valid reset token.
        This endpoint is typically used in the "forgot password" flow.
      parameters:
      - description: New user credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordReqBody'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Reset password
      tags:
      - Password
  /profile:
    get:
      consumes:
      - application/json
      description: Retrieves and returns the profile information of the currently
        authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Profile
  /profile/verify-email:
    get:
      consumes:
      - application/json
      description: Sends a verification email to the user. This endpoint can be used
        to resend the email if needed.
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Send user verification email
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Confirms the email address of the currently authenticated user.
        This endpoint requires an email verification token sent to the user's registered
        email.
      parameters:
      - description: Email verification data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.VerifyEmailReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Verify user email
      tags:
      - Profile
  /sign-in:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token for session management.
        Valid credentials are required to access the system.
      parameters:
      - description: User sign in data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SignInReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SignInResBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: User sign in
      tags:
      - Auth
  /sign-up:
    post:
      consumes:
      - application/json
      description: Registers a new user account with the provided details, including
        email, password, and other relevant information. Verification email will be
        sent.
      parameters:
      - description: User sign up data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SignUpReqBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SignUpResBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: User sign up
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
